{"ast":null,"code":"var _jsxFileName = \"/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport FeaturedMovie from \"./components/Featured\";\nimport Header from \"./components/Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _s(() => {\n  _s();\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() => {\n    const loadAll = async () => {\n      // pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list); // pegando o FEATURED\n\n      let originals = list.filter(i => i.slug === \"originals\");\n      let randomChoice = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChoice];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, \"tv\");\n      setFeaturedData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 500) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", scrollListener);\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-page\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      black: blackHeader\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), featuredData && /*#__PURE__*/_jsxDEV(FeaturedMovie, {\n      item: featuredData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"lists\",\n      children: movieList.map((item, key) => /*#__PURE__*/_jsxDEV(MovieRow, {\n        title: item.title,\n        items: item.items\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [\"all rights reserved for \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://www.netflix.com/br-en/\",\n        children: \"NETFLIX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }, this), \"data acquired by T\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}, \"X/TsTIBWl4G5VJMk6QGmyiovK0c=\");","map":{"version":3,"sources":["/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/App.js"],"names":["React","useEffect","useState","Tmdb","MovieRow","FeaturedMovie","Header","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","loadAll","list","getHomeList","originals","filter","i","slug","randomChoice","Math","floor","random","items","results","length","chosen","chosenInfo","getMovieInfo","id","scrollListener","window","scrollY","addEventListener","removeEventListener","map","item","key","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAGA,kBAAe,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,OAAO,GAAG,YAAY;AAC1B;AACA,UAAIC,IAAI,GAAG,MAAMX,IAAI,CAACY,WAAL,EAAjB;AACAP,MAAAA,YAAY,CAACM,IAAD,CAAZ,CAH0B,CAK1B;;AACA,UAAIE,SAAS,GAAGF,IAAI,CAACG,MAAL,CAAYC,CAAC,IAAEA,CAAC,CAACC,IAAF,KAAW,WAA1B,CAAhB;AACA,UAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BC,MAA3B,GAAmC,CAApD,CAAX,CAAnB;AACA,UAAIC,MAAM,GAAGX,SAAS,CAAC,CAAD,CAAT,CAAaQ,KAAb,CAAmBC,OAAnB,CAA2BL,YAA3B,CAAb;AACA,UAAIQ,UAAU,GAAG,MAAMzB,IAAI,CAAC0B,YAAL,CAAkBF,MAAM,CAACG,EAAzB,EAA6B,IAA7B,CAAvB;AAEApB,MAAAA,eAAe,CAACkB,UAAD,CAAf;AAED,KAbD;;AAeAf,IAAAA,OAAO;AACR,GAjBQ,EAiBN,EAjBM,CAAT;AAmBAZ,EAAAA,SAAS,CAAC,MAAI;AACZ,UAAM8B,cAAc,GAAG,MAAM;AAC3B,UAAGC,MAAM,CAACC,OAAP,GAAiB,GAApB,EAAyB;AACvBrB,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD,OAFD,MAEO;AACLA,QAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,KAND;;AAOAoB,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,cAAlC;AAEA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,cAArC;AACD,KAFD;AAGD,GAbQ,EAaP,EAbO,CAAT;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BAEE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEpB;AAAf;AAAA;AAAA;AAAA;AAAA,YAFF,EAIGF,YAAY,iBAAI,QAAC,aAAD;AAAe,MAAA,IAAI,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,YAJnB,eAME;AAAS,MAAA,SAAS,EAAC,OAAnB;AAAA,gBACGF,SAAS,CAAC6B,GAAV,CAAc,CAACC,IAAD,EAAOC,GAAP,kBACb,QAAC,QAAD;AAAoB,QAAA,KAAK,EAAED,IAAI,CAACE,KAAhC;AAAuC,QAAA,KAAK,EAAEF,IAAI,CAACb;AAAnD,SAAec,GAAf;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YANF,eAYE;AAAA,0DAC0B;AAAG,QAAA,IAAI,EAAC,gCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD1B;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA3DD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport FeaturedMovie from \"./components/Featured\"\nimport Header from \"./components/Header\";\n\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null)\n  const [blackHeader, setBlackHeader] = useState(false)\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list)\n\n      // pegando o FEATURED\n      let originals = list.filter(i=>i.slug === \"originals\")\n      let randomChoice = Math.floor(Math.random() * (originals[0].items.results.length -1))\n      let chosen = originals[0].items.results[randomChoice]\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, \"tv\")\n      \n      setFeaturedData(chosenInfo)\n\n    }\n\n    loadAll()\n  }, []);\n\n  useEffect(()=>{\n    const scrollListener = () => {\n      if(window.scrollY > 500) {\n        setBlackHeader(true)\n      } else {\n        setBlackHeader(false)\n      }\n    }\n    window.addEventListener(\"scroll\", scrollListener)\n\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener)\n    }\n  },[])\n\n  return (\n    <div className=\"home-page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData && <FeaturedMovie item={featuredData} />}\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        all rights reserved for <a href=\"https://www.netflix.com/br-en/\">NETFLIX</a>\n        data acquired by T \n      </footer>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}