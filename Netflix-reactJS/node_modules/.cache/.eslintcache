[{"/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/index.js":"1","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/App.js":"2","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/reportWebVitals.js":"3","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/Tmdb.js":"4","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/components/Featured/index.jsx":"5","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/components/Header/index.jsx":"6","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/components/MovieRow/index.jsx":"7"},{"size":245,"mtime":1618239199304,"results":"8","hashOfConfig":"9"},{"size":1888,"mtime":1618323428365,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1618241321886,"results":"11","hashOfConfig":"9"},{"size":2322,"mtime":1618248189952,"results":"12","hashOfConfig":"9"},{"size":1982,"mtime":1618332112410,"results":"13","hashOfConfig":"9"},{"size":604,"mtime":1618266462816,"results":"14","hashOfConfig":"9"},{"size":1805,"mtime":1618335265441,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1eo0qgd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/index.js",["37"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);",["38","39"],"/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/App.js",["40"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Tmdb from \"./Tmdb\";\nimport MovieRow from \"./components/MovieRow\";\nimport FeaturedMovie from \"./components/Featured\"\nimport Header from \"./components/Header\";\n\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null)\n  const [blackHeader, setBlackHeader] = useState(false)\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list)\n\n      // pegando o FEATURED\n      let originals = list.filter(i=>i.slug === \"originals\")\n      let randomChoice = Math.floor(Math.random() * (originals[0].items.results.length -1))\n      let chosen = originals[0].items.results[randomChoice]\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, \"tv\")\n      \n      setFeaturedData(chosenInfo)\n\n    }\n\n    loadAll()\n  }, []);\n\n  useEffect(()=>{\n    const scrollListener = () => {\n      if(window.scrollY > 500) {\n        setBlackHeader(true)\n      } else {\n        setBlackHeader(false)\n      }\n    }\n    window.addEventListener(\"scroll\", scrollListener)\n\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener)\n    }\n  },[])\n\n  return (\n    <div className=\"home-page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData && <FeaturedMovie item={featuredData}/>}\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        <p className=\"netflix\">All Rights Reserved for <a href=\"https://www.netflix.com/br-en/\">Netflix</a></p>\n        <p className=\"tmdb\">Data acquired by <a href=\"https://www.themoviedb.org/\">The Movie Database</a> <sup>(TMDB)</sup></p>\n      </footer>\n    </div>\n  )\n}","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/reportWebVitals.js",[],"/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/Tmdb.js",["41"],"const API_KEY = \"48f6e1a83c41f806ee1e4dfe7234d545\";\nconst API_BASE = \"https://api.themoviedb.org/3\";\n// precisa pegar***\n/*\n- originais netflix\n- recomendados (recommend)\n- em alta (trending)\n- ação\n- comédia\n- terror\n- romance\n- documentário\n*/\n\nconst basicFetch = async (endpoint) => {\n    const requisition = await fetch(`${API_BASE}${endpoint}`)\n    const json = await requisition.json()\n    return json\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: \"originals\", title: \"Netflix Originals\", items: await basicFetch(`/discover/tv?with_network=213&api_key=${API_KEY}`),\n            },\n            {\n                slug: \"trending\", title: \"Recommend for you\", items: await basicFetch(`/trending/movie/week?api_key=${API_KEY}`),\n            },\n            {\n                slug: \"top-rated\", title: \"Top-Rated\", items: await basicFetch(`/movie/top_rated?api_key=${API_KEY}`),\n            },\n            {\n                slug: \"action\", title: \"Action\", items: await basicFetch(`/discover/movie?with_genres=28&api_key=${API_KEY}`),\n            },\n            {\n                slug: \"comedy\", title: \"Comedy\", items: await basicFetch(`/discover/movie?with_genres=35&api_key=${API_KEY}`),\n            },\n            {\n                slug: \"horror\", title: \"Horror\", items: await basicFetch(`/discover/movie?with_genres=27&api_key=${API_KEY}`),\n            },\n            {\n                slug: \"romance\", title: \"Romance\", items: await basicFetch(`/discover/movie?with_genres=10749&api_key=${API_KEY}`),\n            },\n            {\n                slug: \"documentary\", title: \"Documentary\", items: await basicFetch(`/discover/movie?with_genres=99&api_key=${API_KEY}`)\n            }\n        ]\n    },\n\n    getMovieInfo: async (movieId, type) => {\n        let info = {}\n\n            if(movieId) {\n                switch(type) {\n                    case \"movie\":\n                        info = await basicFetch(`/movie/${movieId}?api_key=${API_KEY}`)\n                    break;\n\n                    case \"tv\":\n                        info = await basicFetch(`/tv/${movieId}?api_key=${API_KEY}`)\n                    break;\n\n                    default:\n                        info = null\n                }\n            }\n            return info\n        }\n    }","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/components/Featured/index.jsx",["42"],"import React from \"react\";\nimport \"./FeaturedMovie.css\";\nimport AddIcon from '@material-ui/icons/Add';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\n\nexport default ({item}) => {\n\n    let firstDate = new Date(item.first_air_date)\n    let genres = []\n    for(let i in item.genres) {\n        genres.push(item.genres[i].name)\n    }\n\n    let averageVote = item.vote_average\n    averageVote = ((averageVote) * 10.0);\n\n    let lengthOverview = item.overview;\n    let length = 250;\n    lengthOverview = lengthOverview.length > length ? lengthOverview.substring(0, length - 3) + \"...\" : lengthOverview\n\n    return (\n        <section className=\"featured\" style={{backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`}}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">{item.original_name}</div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{averageVote + \"%\"} Match</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} Season{item.number_of_seasons !== 1 ? \"s\" : \"\"}</div>\n                        <div className=\"featured--description\">{lengthOverview}</div>\n                        <div className=\"featured--buttons\">\n                            <a href={`/watch/${item.id}`} className=\"featured--watchbutton arrow--icon\"><PlayArrowIcon style={{fontSize: 20}}/>Watch</a>\n                            <a href={`/list/add/${item.id}`} className=\"featured--mylist add--icon\"><AddIcon style={{fontSize: 20}}/> My list</a>\n                        </div>\n                        <div className=\"featured--genres\"><strong>Genres</strong>: {genres.join(\", \")}</div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/components/Header/index.jsx",["43"],"import React from \"react\"\nimport \"./Header.css\"\n\nexport default ({black}) => {\n    return (\n        <header className={black ? \"black\" : \"\"}>\n            <div className=\"header--logo\">\n                <a href=\"/\">\n                    <img src=\"https://www.logo.wine/a/logo/Netflix/Netflix-Logo.wine.svg\" alt=\"netflix\"/>\n                </a>\n            </div>\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img src=\"http://getdrawings.com/free-icon/download-icon-anime-52.png\" alt=\"usuario\"/>\n                </a>\n            </div>\n        </header>\n    )\n}","/home/gregsnn/Documents/VSCode/Github/personal-projects/Netflix-reactJS/src/components/MovieRow/index.jsx",["44"],"import React, { useState } from \"react\";\nimport \"./MovieRow.css\";\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nexport default ({title, items}) => {\n    const [scrollX, setScrollX] = useState(0)\n\n    const handleLeftArrow = () => {\n        let xLeft = scrollX + Math.round(window.innerWidth / 1.1)\n        if(xLeft > 0) {\n            xLeft = 0\n        }\n        setScrollX(xLeft)\n    }\n\n    const handleRightArrow = () => {\n        let xRight = scrollX - Math.round(window.innerWidth / 1.1)\n        let listWidth = items.results.length * 160\n        if((window.innerWidth - listWidth) > xRight) {\n            xRight = (window.innerWidth - listWidth) - 80\n        }\n        setScrollX(xRight)\n    }\n\n    return (\n        <div className=\"movieRow\">\n            <h2 style={{paddingLeft:20}}>{title}</h2>\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\n                <NavigateBeforeIcon style={{fontSize: 50}} />\n            </div>\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\n                <NavigateNextIcon style={{fontSize: 50}} />\n            </div>\n\n            <div className=\"movieRow--listarea \">\n                <div className=\"movieRow--list\" style={{\n                    marginLeft: scrollX,\n                    width: items.results.length * 160\n                }}>\n                    {items.results.length > 0 && items.results.map((item, key) => (\n                        <div key={key} className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.orginal_title} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    )\n}",{"ruleId":"45","severity":1,"message":"46","line":4,"column":8,"nodeType":"47","messageId":"48","endLine":4,"endColumn":23},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":9,"column":1,"nodeType":"55","endLine":68,"endColumn":2},{"ruleId":"53","severity":1,"message":"56","line":21,"column":1,"nodeType":"55","endLine":70,"endColumn":6},{"ruleId":"53","severity":1,"message":"54","line":6,"column":1,"nodeType":"55","endLine":41,"endColumn":2},{"ruleId":"53","severity":1,"message":"54","line":4,"column":1,"nodeType":"55","endLine":19,"endColumn":2},{"ruleId":"53","severity":1,"message":"54","line":6,"column":1,"nodeType":"55","endLine":50,"endColumn":2},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["57"],"no-negated-in-lhs",["58"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]